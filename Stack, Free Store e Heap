
Stack (Pilha é estratégia de gerenciamento de memória onde todas as variáveis locais em uma função são alocadas até o de fim de sua execução. Nela, uma estrutura de memória na qual todas as chamadas de funções, desde o início do encadeamento atual até a função atualmente executada, são armazenadas juntamente com a memória que eles usam, ou seja, as variáveis ​​que residem numa Stack são armazenadas lá até que a função em que residem retorne. Quando o método retornar, todas as variáveis ​​locais serão limpas.

Também uma técnica de gerenciamento de memória, no heap as variáveis são alocadas usando malloc() ou calloc() e liberadas novamente usando free(), contidas na biblioteca stdlib.h do C. Isso permite que a memória seja administrada com mais dinamismo, uma vez que o espaço alocado pode ser utilizado e reciclado em um mesmo período de execução. Porém essas chamadas não chamam o construtor de um objeto de uma classe (C++), deixando o programa com memória alocada para um objeto inválido, gerando erro de execução. Logo, se deve evitar o uso de malloc ou calloc para alocar um objeto em C++ e atentar ao fato que estes estão lá presentes por o C++ ser uma aplicação do C.

A técnica Free Store está em C++ como esta o heap em C. Os objetos no Free Store são alocados usando new ou new[] e liberados novamente usando delete ou delete[]. Objetos alocados usando new ou new[] são alocados e seu construtor é chamado quando a memória é alocada. Objetos destruídos usando delete ou delete [] têm seu destrutor chamado antes que a memória seja liberada novamente.